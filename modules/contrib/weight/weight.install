<?php

/**
 * Implements hook_install().
 */
function weight_install() {
  field_cache_clear();

  $field = array(
    'field_name' => 'weight',
    'type' => 'weight_weight',
    'locked' => TRUE,
  );
  field_create_field($field);
}

/**
 * Implements hook_schema().
 */
function weight_schema() {
  $schema['weight_settings'] = array(
    'description' => 'Table for storing Weight configuration',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a content type configuration',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight_enabled' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight_range' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 20,
      ),
      'menu_weight' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight_default' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'node_type' => array(
        'table' => 'node_type',
        'columns' => array('type' => 'type'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function weight_field_schema($field) {
  return array(
    'columns' => array(
      'value' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
  );
}

/**
 * Insert existing settings into {weight_settings}.
 */
function weight_update_7200() {
  $types = node_type_get_names();
  $weight_types = variable_get('weight_node_types', array());
  $range = variable_get('weight_range', 20);
  $menu_weight = variable_get('weight_use_menu', 0);
  $default = variable_get('weight_default', 0);

  drupal_install_schema('weight');

  // If there are no content types, there is nothing to convert.
  if (empty($types)) {
    return;
  }

  foreach ($types as $type => $name) {
    if (in_array($type, $weight_types)) {
      $enabled = 1;
    }
    else {
      $enabled = 0;
    }

    $query = db_insert('weight_settings')
      ->fields(array(
        'type' => $type,
        'weight_enabled' => $enabled,
        'weight_range' => $range,
        'menu_weight' => $menu_weight,
        'weight_default' => $default,
      ))
      ->execute();
  }
}

/**
 * Create field instances for enabled content types.
 */
function weight_update_7201() {
  field_cache_clear();

  $field = array(
    'field_name' => 'weight',
    'type' => 'weight_weight',
    'locked' => TRUE,
  );
  field_create_field($field);

  $types = variable_get('weight_node_types', array());
  $range = variable_get('weight_range', 20);

  foreach ($types as $type) {
    _weight_create_instance($type, $range);
  }
}

/**
 * Move existing node weights to Field API and restore sticky values.
 */
function weight_update_7202(&$sandbox) {
  $sandbox['#finished'] = 0;

  // First pass.
  if (!isset($sandbox['total'])) {
    $sandbox['last'] = 0;
    $sandbox['count'] = 0;

    $query = db_select('node', 'n');
    $sandbox['total'] = $query->countQuery()->execute()->fetchField();
  }
  // Subsequent passes.
  else {
    $found = FALSE;
    if ($sandbox['total']) {
      $batch_size = 200;
      $query = db_select('node', 'n');
      $query
        ->fields('n', array('nid', 'vid', 'type', 'language', 'sticky'))
        ->condition('n.nid', $sandbox['last'], '>')
        ->orderBy('n.nid')
        ->range(0, $batch_size);
      $nodes = $query->execute();

      foreach ($nodes as $node) {
        $found = TRUE;
        $values = _weight_update_7202_decode($node->sticky);
        if ($values['weight'] != NULL) {
          $query = db_insert('field_data_weight')
            ->fields(array(
              'entity_type' => 'node',
              'bundle' => $node->type,
              'entity_id' => $node->nid,
              'revision_id' => $node->vid,
              'language' => $node->language,
              'delta' => 0,
              'weight_value' => $values['weight'],
            ))
            ->execute();
        }

        db_update('node')
          ->fields(array(
            'sticky' => $values['sticky'],
          ))
          ->condition('nid', $node->nid)
          ->execute();

        $sandbox['last'] = $node->nid;
        $sandbox['count'] += 1;
      }

      if (($sandbox['count'] == $sandbox['total'])) {
        $sandbox['#finished'] = 1;
      }
    }

    // No nodes left to process.
    if (!$found) {
      $sandbox['#finished'] = 1;
    }
  }
}

/**
 * Remove existing variables.
 */
function weight_update_7203() {
  variable_del('weight_node_types');
  variable_del('weight_range');
  variable_del('weight_use_menu');
  variable_del('weight_default');
  variable_del('weight_label');
  variable_del('weight_position');
}

/**
* Alter database to allow for negative default weights.
*/
function weight_update_7204() {
  $spec = array(
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => FALSE,
    'not null' => TRUE,
    'default' => 0,
  );
  db_change_field('weight_settings', 'weight_default', 'weight_default', $spec);
}

/**
 * Decode weight from sticky column.
 */
function _weight_update_7202_decode($sticky) {
  $values = array();

  if ($sticky == 0 || $sticky == 1) {
    $values['weight'] = NULL;
    $values['sticky'] = $sticky;
  }
  elseif ($sticky > 0) {
    $values['weight'] = 100 - $sticky;
    $values['sticky'] = 1;
  }
  else {
    $values['weight'] = -($sticky + 100);
    $values['sticky'] = 0;
  }

  return $values;
}
