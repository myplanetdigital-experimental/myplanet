<?php

/**
 * @file
 * Allow to add additional CSS & JS files to Panels and Mini Panels.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function panels_css_js_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'ctools_plugins/' . $plugin;
  }
}

/**
 * Implements hook_page_manager_variant_operations_alter().
 */
function panels_css_js_page_manager_variant_operations_alter(&$ops, $handler) {
  reset($ops['children']);
  $children_operations = array();
  while (list($key, $value) = each($ops['children'])) {
    $children_operations[$key] = $value;
    if ($key == 'context') {
      $children_operations['css_js'] = array(
        'title' => t('CSS & JS'),
        'description' => t('Add additional CSS & JS files to your page.'),
        'form' => 'panels_css_js_form',
      );
    }
  }
  $ops['children'] = $children_operations;
}

/**
 * CSS & JS settings form for Variant Tab
 */
function panels_css_js_form($form, &$form_state) {
  $conf = &$form_state['handler']->conf;
  if (empty($conf['panels_css_js_css'])) {
    $conf['panels_css_js_css'] = '';
  }
  if (empty($conf['panels_css_js_js'])) {
    $conf['panels_css_js_js'] = '';
  }
  panels_css_js_edit_form($form, $conf);
  return $form;
}

/**
 * Common CSS & JS settings form that is used for Variant Tab and Content Type.
 */
function panels_css_js_edit_form(&$form, &$conf) {
  $description = 'Enter one file per line. You can use "[module-{module_name}]"
    or "[theme-{theme_name}]" placeholders instead of path to module/theme.
    <br />For example, [module-views] - path to module "Views",[theme] - path to
    currentpage theme, [theme-zen] - path to theme "Zen"';
  $form['settings']['panels_css_js_css'] = array(
    '#type' => 'textarea',
    '#title' => t('CSS Files'),
    '#description' => t($description),
    '#default_value' => $conf['panels_css_js_css'],
  );
  $form['settings']['panels_css_js_js'] = array(
    '#type' => 'textarea',
    '#title' => t('JS Files'),
    '#description' => t($description),
    '#default_value' => $conf['panels_css_js_js'],
  );
}

/**
 * Handles CSS & JS settings form submission for Variant Tab
 */
function panels_css_js_form_submit($form, &$form_state) {
  $conf = &$form_state['handler']->conf;
  panels_css_js_edit_form_submit($form_state, $conf);
}

/**
 * Handles CSS & JS settings forms submission for Variant Tab and Content Type.
 */
function panels_css_js_edit_form_submit(&$form_state, &$conf) {
  $conf['panels_css_js_css'] = $form_state['values']['panels_css_js_css'];
  $conf['panels_css_js_js'] = $form_state['values']['panels_css_js_js'];
}

/**
 * Implements hook_ctools_render_alter().
 * When a Panels item is rendered, add CSS & JS files for Variant Tab.
 */
function panels_css_js_ctools_render_alter($info, $page, $context) {
  $conf = $context['handler']->conf;
  if (!isset($conf['panels_css_js_css'])) {
    return;
  }
  panels_css_js_render($conf);
}

/**
 * Common render function for Variant Tab and Content Type.
 */
function panels_css_js_render($conf) {
  $files = panels_css_js_filter_value($conf['panels_css_js_css']);
  foreach ($files as $css_file) {
    drupal_add_css($css_file);
  }
  $files = panels_css_js_filter_value($conf['panels_css_js_js']);
  foreach ($files as $js_file) {
    drupal_add_js($js_file);
  }
}

/**
 * Explode function for textarea fields.
 */
function panels_css_js_filter_value($value) {
  $files = array();
  if ($value) {
    $lines = explode(PHP_EOL, $value);
    $filtered_files = array_filter(array_map('trim', $lines), 'strlen');
    foreach ($filtered_files as $filtered_file) {
      $files[] = panels_css_js_check_placeholders($filtered_file);
    }
  }
  return $files;
}

/**
 * Common function for checking if placeholders exist at the file path
 * and replace it by proper paths.
 */
function panels_css_js_check_placeholders($filepath) {
  $ph_funcs = array('module', 'current_theme', 'theme');
  foreach ($ph_funcs as $ph_func) {
    $func_name = 'panels_css_js_check_' . $ph_func . '_placeholder';
    $func_name($filepath);
  }
  return $filepath;
}

/**
 * Check for [module-{module_name}] placeholder.
 */
function panels_css_js_check_module_placeholder(&$filepath) {
  $ph = '[module-';
  $pos_1 = mb_strpos($filepath, $ph);
  $pos_2 = mb_strpos($filepath, ']', $pos_1);
  if ($pos_1 !== FALSE && $pos_2 !== FALSE) {
    $ph_length = mb_strlen($ph);
    $length = $pos_2 - $pos_1 - $ph_length;
    $pos_1 += $ph_length;
    $name = mb_substr($filepath, $pos_1, $length);
    $ph .= $name . ']';
    $path = drupal_get_path('module', $name);
    if ($path != '') {
      $filepath = str_replace($ph, $path, $filepath);
    }
  }
}

/**
 * Check for [theme] placeholder (current theme).
 */
function panels_css_js_check_current_theme_placeholder(&$filepath) {
  $ph = '[theme]';
  $pos_1 = mb_strpos($filepath, $ph);
  if ($pos_1 !== FALSE) {
    $theme_path = dirname($GLOBALS['theme_info']->filename);
    $filepath = str_replace($ph, $theme_path, $filepath);
  }
}

/**
 * Check for [theme-{theme_name}] placeholder.
 */
function panels_css_js_check_theme_placeholder(&$filepath) {
  $ph = '[theme-';
  $pos_1 = mb_strpos($filepath, $ph);
  $pos_2 = mb_strpos($filepath, ']', $pos_1);
  if ($pos_1 !== FALSE && $pos_2 !== FALSE) {
    $ph_length = mb_strlen($ph);
    $length = $pos_2 - $pos_1 - $ph_length;
    $pos_1 += $ph_length;
    $name = mb_substr($filepath, $pos_1, $length);
    $ph .= $name . ']';
    $path = drupal_get_path('theme', $name);
    if ($path != '') {
      $filepath = str_replace($ph, $path, $filepath);
    }
  }
}
